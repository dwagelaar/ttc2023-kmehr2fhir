pre {
  var xmlTypeFactory = Native('org.eclipse.emf.ecore.xml.type.impl.XMLTypeFactoryImpl').init();

  var genderMap = Map {
    KMEHR!#changed = FHIR!AdministrativeGenderEnum#other,
    KMEHR!#female = FHIR!#female,
    KMEHR!#male = FHIR!#male,
    KMEHR!CDSEXvalues#unknown = FHIR!AdministrativeGenderEnum#unknown,
    KMEHR!CDSEXvalues#undefined = FHIR!AdministrativeGenderEnum#other
  };

  var systemMap = Map {
    "phone" = FHIR!#phone,
    "mobile" = FHIR!#phone,
    "fax" = FHIR!#fax,
    "email" = FHIR!#email
  };

  var relationshipMap = Map {
    'father' = 'FTH',
    'child' = 'CHILD',
    'familymember' = 'FAMMEMB',
    'spouse' = 'SPS',
    'husband' = 'HUSB',
    'partner' = 'DOMPART',
    'other' = 'thirdParty',
    'brother' = 'BRO',
    'sister' = 'SIS',
    'brotherinlaw' = 'BROINLAW',
    'tutor' = 'thirdParty',
    'notary' = 'thirdParty',
    'lawyer' = 'thirdParty',
    'employer' = 'thirdParty',
    'grandparent' = 'GRPRN',
    'son' = 'SON',
    'daugher' = 'DAU',
    'grandchild' = 'GRNDCHILD',
    'neighbour' = 'NBOR',
    'stepson' = 'STPSON',
    'stepdaughter' = 'STPDAU',
    'stepfather' = 'STPFTH',
    'stepmother' = 'STPMTH',
    'sisterinlaw' = 'SISINLAW'
  };

  var dayPeriodMap = Map {
		#afterbreakfast = #PCM,
		#afterdinner = #PCV,
		#afterlunch = #PCD,
		#aftermeal = #PC,
		#afternoon = #AFT,
		#beforebreakfast = #ACM,
		#beforedinner = #ACV,
		#beforelunch = #ACD,
		#betweenbreakfastandlunch = #PCM,
		#betweendinnerandsleep = #PCV,
		#betweenlunchanddinner = #PCD,
		#betweenmeals = #PC,
		#evening = #EVE,
		#morning = #MORN,
		#night = #NIGHT,
		#thehourofsleep = #HS,
		#duringbreakfast = #CM,
		#duringlunch = #CD,
		#duringdinner = #CV
  };

  var unitsOfMeasureMap = Map {
		#`_00001` = '5 ml',
		#`_00002` = 'amp.',
		#`_00003` = 'applic.',
		#`_00004` = 'caps.',
		#`_00005` = 'compr.',
		#`_00006` = 'dosis',
		#`_00007` = 'drops',
		#`_00008` = 'flac.',
		#`_00009` = 'implant',
		#`_00010` = 'perfusion',
		#`_00011` = 'inhal.',
		#`_00012` = 'insert',
		#`_00013` = 'chewing gum',
		#`_00014` = 'Compress(es)',
		#`_00015` = 'lav.',
		#`_00016` = 'ml',
		#`_00017` = 'ov.',
		#`_00018` = 'pearl(s)',
		#`_00019` = 'pastille',
		#`_00020` = 'patch',
		#`_00021` = 'cart.',
		#`_00022` = 'pen',
		#`_00023` = 'puff(s)',
		#`_00024` = 'sponge',
		#`_00025` = 'stylo',
		#`_00026` = 'suppo',
		#`_00027` = 'tube',
		#`_00028` = 'wick',
		#`_00029` = 'bag',
		#`_00030` = 'bag(s)',
		KMEHR!CDADMINISTRATIONUNITvalues#cm = 'cm',
		#dropsperminute = 'drp/min',
		KMEHR!CDADMINISTRATIONUNITvalues#gm = 'g',
		#internationalunits = 'international units',
		#`mckH` = 'mg/h',
		#`mckKgMinute` = 'mg/kg/min',
		#measure = 'measure',
		#`mgH` = 'mg/h',
		#`mlH` = 'ml/h',
		KMEHR!CDADMINISTRATIONUNITvalues#tbl = 'tablespoon',
		KMEHR!CDADMINISTRATIONUNITvalues#tsp = 'teaspoon',
		#`untH` = 'units/h',
		KMEHR!CDADMINISTRATIONUNITvalues#mg = 'mg',
		KMEHR!CDADMINISTRATIONUNITvalues#`mgMl` = 'mg/ml',
		KMEHR!CDADMINISTRATIONUNITvalues#meq = 'milli-equivalent',
		#miu = 'miu',
		#iu = 'iu',
		#mmol = 'mmol',
		#`effervescentTablet` = 'effervescent tablet',
		#micrograms = 'micrograms',
		#bandage = 'bandage',
		#piece = 'piece',
		KMEHR!CDADMINISTRATIONUNITvalues#box = 'box',
		#liter = 'l',
		#syringe = 'syringe',
		#ampoule = 'ampoule',
		#bottle = 'bottle',
		#`syringeAmpoule` = 'syringe ampoule'
  };

}

// RULES

rule DocumentRoot
  transform s: KMEHR!kmehr::DocumentRoot
  to t: FHIR!DocumentRoot
{
  t.bundle ::= s.kmehrmessage.folder.selectFirst(f | f.patient.isDefined());
}

rule Folder
  transform s: KMEHR!FolderType
  to t: FHIR!Bundle, bt: FHIR!BundleType
{
  guard: s.patient.isDefined()

  bt.value = #document;
  t.type = bt;

  var inputElements = Sequence { s.`transaction`, s.patient };

  inputElements.addAll(s.`transaction`.collect(tr | tr.txAuthor()));

  inputElements.addAll(s.`transaction`
    .collect(tr | tr.item.collect(i | i.hcpartyContent())));

  inputElements.addAll(s.`transaction`
      .collect(tr | tr.item.select(i | i.isMedication())
          .collect(i | Sequence { i.posology, i })));

  inputElements.addAll(s.`transaction`
    .collect(tr | tr.item.select(i | i.isAllergy() or i.isIntolerance())));
  inputElements.addAll(s.`transaction`
    .collect(tr | tr.item.select(i | i.isActiveProblem())));
  inputElements.addAll(s.`transaction`
    .collect(tr | tr.item.select(i | i.isVaccine())));
  inputElements.addAll(s.`transaction`
    .collect(tr | tr.item.select(i | i.isInactiveProblem())));

  t.entry.addAll(inputElements
    .flatten()
    .collect(i | i.equivalents('CompositionBundleEntry', 'PatientBundleEntry', 'OrganizationBundleEntry', 'PractitionerBundleEntry', 'MedicationBundleEntry', 'PosologyBundleEntry', 'AllergyIntoleranceBundleEntry', 'ConditionBundleEntry', 'ImmunizationBundleEntry')).flatten()
    .select(e | e.isKindOf(FHIR!BundleEntry)));
}

rule SumEHRTransaction
  transform s: KMEHR!TransactionType
  to t: FHIR!Composition,
     cid: FHIR!Id,
     patRef: FHIR!Reference,
     cStatus: FHIR!CompositionStatus,
     dateTime: FHIR!fhir::DateTime
{
  guard: s.cd.exists(cd| cd.value = 'sumehr')

  // FolderType which contains this transaction 
  var f = s.eContainer;

  t.id = cid;
  t.identifier = Sequence { CompositionIdentifier(s.uuid()) };
  t.type = CodeableConcept(CodingWithDisplay('http://loinc.org', '60591-5', 'Patient summary Document'));
  t.subject = Sequence { patRef };
  t.status = cStatus;
  t.date = dateTime;
  
  t.section = Sequence {
    s.equivalent('MedicationSection'),
    s.equivalent('AllergyIntoleranceSection'),
    s.equivalent('ActiveProblemSection'),
    s.equivalent('ImmunizationSection'),
    s.equivalent('HistorySection')
  };

  cid.value = s.uuid();
  patRef.reference = FhirString('Patient/' + f.patient.uuid());

  cStatus.value = s.iscomplete ? (
    s.isvalidated ? FHIR!CompositionStatusEnum#final : FHIR!CompositionStatusEnum#preliminary
  ) : FHIR!CompositionStatusEnum#partial;

  dateTime.value = xmlTypeFactory.createDateTime(s.date.toXMLFormat() + 'T' + s.time.toXMLFormat());

  // SumEHRTransactionWithAuthor
  if (s.txAuthor().isDefined()) {
    var refPrefix = 'Other/';
    if (s.txAuthor().isOrganization()) {
      refPrefix = 'Organization/';
    } else if (s.txAuthor().isPractitioner()) {
      refPrefix = 'Practitioner/';
    }

    var authRef = new FHIR!Reference;
    t.author = Sequence { authRef };
    authRef.reference = FhirString(refPrefix + s.msgSender().uuid());
  }

  // SumEHRTransactionWithCustodian
  var i = s.custodianItem();
  if (i.isDefined()) {
    var refPrefix = 'Other/';
    if (i.hcpartyContent().isOrganization()) {
      refPrefix = 'Organization/';
    } else if (i.hcpartyContent().isPractitioner()) {
      refPrefix = 'Practitioner/';
    }

    var gmdRef = new FHIR!Reference;
    t.custodian = gmdRef;
    gmdRef.reference = FhirString(refPrefix + i.hcpartyContent().uuid());
  }
}

rule Patient
  transform s: KMEHR!PersonType
  to t: FHIR!Patient, pid: FHIR!Id, humanName: FHIR!HumanName
{
  guard: s.eContainingFeature.name == 'patient'

  var f = s.eContainer;

  t.id = pid;
  t.active = FhirBoolean(true);
  t.name = Sequence { humanName };
  t.gender = s.sex.equivalent('AdministrativeGender');
  t.birthDate = s.birthdate.equivalent('FhirDate');

  t.address ::= s.address;
  t.telecom = s.telecom.equivalent().select(e|e.isKindOf(FHIR!ContactPoint));

  // TODO - implement PatientContact rule
  var contactSources = f.`transaction`.collect(tx |
      tx.item.select(i | i.isContactPerson())
             .collect(i | i.content.collect(c | c.person))
    ).flatten();

  var mappedSources = contactSources
     .collect(contact | contact.equivalent('PatientContact'))
     .reject(e|e.isUndefined());

  t.contact.addAll(mappedSources);

  pid.value = s.uuid();
  humanName.family = FhirString(s.familyname);
  humanName.given = s.firstname.collect(fn | FhirString(fn));
}

rule Address
  transform s: KMEHR!AddressType
  to t: FHIR!Address
{
  t.line = Sequence { FhirString(s.addressLine()) };
  t.postalCode = FhirString(s.zip);
  t.city = FhirString(s.city);
  t.country = FhirString(s.countryString());
}

rule Telecom
  transform s: KMEHR!TelecomType
  to t: FHIR!ContactPoint, system: FHIR!ContactPointSystem, use: FHIR!ContactPointUse
{
  t.system = system;
  t.value = FhirString(s.telecomnumber.trim());
  t.use = use;

  system.value = s.system();
  use.value = s.contactPointUse();
}

rule PatientContact
  transform s: KMEHR!PersonType
  to t: FHIR!PatientContact, humanName: FHIR!HumanName
{
  guard: (
    s.eContainer.isDefined()
    and s.eContainingFeature.name = 'person'
    and s.eContainer.eContainer.isDefined()
    and s.eContainer.eContainer.isContactPerson()
  )

  var c = s.eContainer;
  var i = c.eContainer;

  t.name = humanName;
  t.gender = s.sex.equivalent('AdministrativeGender');
  t.address ::= s.address.first;
  t.telecom = s.telecom.equivalent().select(e|e.isKindOf(FHIR!ContactPoint));

  t.relationship.addAll(i.contactPersonRelationships()
    .equivalents('PatientContactRelationship')
    .flatten()
    .select(e|e.isKindOf(FHIR!CodeableConcept))
  );

  humanName.family = FhirString(s.familyname);
  humanName.given = s.firstname.collect(e | FhirString(e));
}

rule Organization
  transform s: KMEHR!HcpartyType
  to t: FHIR!Organization, oid: FHIR!Id, nihii: FHIR!Identifier, riziv: FHIR!Reference
{
  // Extended upon original ATL guard to avoid stray root objects in target trace
  guard: s.isOrganization() and s.closure(e|e.eContainer).none(e|e.isKindOf(KMEHR!HeaderType))

  t.id = oid;
  t.identifier = Sequence { nihii };
  t.active = FhirBoolean(true);
  t.name = FhirString(s.name);

  oid.value = s.uuid();

  nihii.assigner = riziv;
  nihii.value = FhirString(s.id.value.first);

  riziv.display = FhirString('NIHII');
}

rule Practitioner
  transform s: KMEHR!HcpartyType
  to t: FHIR!Practitioner, pid: FHIR!Id, nihii: FHIR!Identifier, riziv: FHIR!Reference, humanName: FHIR!HumanName
{
  // Extended upon original ATL guard to avoid stray root objects in target trace
  guard: s.isPractitioner() and s.closure(e|e.eContainer).none(e|e.isKindOf(KMEHR!HeaderType))

  t.id = pid;
  t.identifier = Sequence { nihii };
  t.active = FhirBoolean(true);
  t.name = Sequence { humanName };

  pid.value = s.uuid();

  nihii.assigner = riziv;
  nihii.value = FhirString(s.id.value.first);

  riziv.display = FhirString('NIHII');

  humanName.family = FhirString(s.familyname);
  humanName.given = Sequence { FhirString(s.firstname) };
}

rule Medication
  transform s: KMEHR!ItemType
  to t: FHIR!Medication, mid: FHIR!Id, medCodes: FHIR!CodeableConcept, status: FHIR!MedicationStatusCodes
{
  guard: s.isMedication()

  t.id = mid;
  t.code = medCodes;
  t.status = status;

  mid.value = s.uuid();

  medCodes.coding.addAll(s.content
    .select(c|c.medicinalproduct.isDefined())
    .collect(c | c.medicinalproduct.equivalents('CNKCode'))
    .flatten().select(e | e.isKindOf(FHIR!Coding)));

  status.value = FHIR!MedicationStatusCodesEnum#active;
}

rule Posology
  transform s: KMEHR!PosologyType
  to t: FHIR!MedicationStatement, msid: FHIR!Id, medCodRef: FHIR!CodeableReference,
     medRef: FHIR!Reference, msstatus: FHIR!MedicationStatementStatusCodes,
     subRef: FHIR!Reference, effectivePeriod: FHIR!Period, dosage: FHIR!Dosage,
     timing: FHIR!Timing, repeat: FHIR!TimingRepeat, periodUnit: FHIR!UnitsOfTime
{
  var i = s.eContainer();
  var tx = i.eContainer();
  var f = tx.eContainer();

  t.id = msid;
  t.medication = medCodRef;
  t.status = msstatus;
  t.subject = subRef;
  t.effectivePeriod = effectivePeriod;
  t.dosage = Sequence { dosage };

  msid.value = s.uuid();
  medCodRef.reference = medRef;
  medRef.reference = FhirString('Medication/' + i.uuid());
  msstatus.value = FHIR!#recorded;
  subRef.reference = FhirString('Patient/' + f.patient.uuid());

  effectivePeriod.start = i.beginmoment.equivalent('FhirDateTime');
  effectivePeriod.end = i.endmoment.equivalent('FhirDateTime');

  dosage.timing = timing;
  timing.repeat = repeat;
  repeat.count = FhirPositiveInt(i.dayperiod.size());
  repeat.periodUnit = periodUnit;
  repeat.when = i.dayperiod.equivalent('EventTiming');
  periodUnit.value = FHIR!UnitsOfTimeEnum#d;

  if (s.unit.isDefined() and s.takes.isDefined()) {
    var doseAndRate = new FHIR!DosageDoseAndRate;
    doseAndRate.type = CodeableConcept(CodingWithDisplay(
      'http://terminology.hl7.org/CodeSystem/dose-rate-type',
	  'ordered',
	  'Ordered'
    ));

    var doseQuantity = new FHIR!Quantity;
    doseAndRate.doseQuantity = doseQuantity;
    dosage.doseAndRate = Sequence { doseAndRate };

    var qSys = new FHIR!Uri;
    doseQuantity.system = qSys;
    var qCode = new FHIR!Code;
    doseQuantity.code = qCode;
    doseQuantity.unit = FhirString(s.unit.cd.toUnitsOfMeasureValue());
    doseQuantity.value = FhirDecimal(s.takes.high);

    qSys.value = 'http://unitsofmeasure.org';
    qCode.value = '1';
  }
}

rule AllergyOrIntolerance
  transform s: KMEHR!ItemType
  to t: FHIR!AllergyIntolerance, aid: FHIR!Id,
     criticality: FHIR!AllergyIntoleranceCriticality, patRef: FHIR!Reference
{
  guard: s.isAllergy() or s.isIntolerance()

  var tx = s.eContainer;
  var f = tx.eContainer;

  t.id = aid;
  t.clinicalStatus = CodeableConcept(CodingWithDisplay(
    'http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical', 
    'active',
    'Active'
  ));
  t.verificationStatus = CodeableConcept(CodingWithDisplay(
    'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification',
    'confirmed',
    'Confirmed'
  ));
  t.type = CodeableConcept(CodingWithDisplay(
    'http://hl7.org/fhir/allergy-intolerance-type',
    s.isAllergy() ? 'allergy' : 'intolerance',
    s.isAllergy() ? 'Allergy' : 'Intolerance'
  ));
  t.criticality = criticality;
  t.patient = patRef;
  t.onsetDateTime = s.beginmoment.equivalent('FhirDateTime');
  t.recordedDate = RecordDateTime(s);

  aid.value = s.uuid();
  criticality.value = FHIR!AllergyIntoleranceCriticalityEnum#high;
  patRef.reference = FhirString('Patient/' + f.patient.uuid());

  if (not s.codedContent().isEmpty()) {
    t.code = new FHIR!CodeableConcept;
    t.code.coding = s.codedContent().collect(c |
      CodingWithDisplay(c.codingSystem(), c.value, c.dN)
    );
  }
}

rule Problem
  transform s: KMEHR!ItemType
  to t: FHIR!Condition, cid: FHIR!Id, subRef: FHIR!Reference
{
  guard: s.isActiveProblem() or s.isInactiveProblem()

  var tx = s.eContainer;
  var f = tx.eContainer;

  t.id = cid;
  t.clinicalStatus = CodeableConcept(CodingWithDisplay(
    'http://terminology.hl7.org/CodeSystem/condition-clinical',
    s.isActiveProblem() ? 'active' : 'inactive',
    s.isActiveProblem() ? 'Active' : 'Inactive'
  ));
  t.verificationStatus = CodeableConcept(CodingWithDisplay(
    'http://terminology.hl7.org/CodeSystem/condition-ver-status',
    'confirmed',
    'Confirmed'
  ));
  t.category = Sequence { CodeableConcept(CodingWithDisplay(
    'http://loinc.org',
    '75326-9',
    'Problem'
  ))};
  t.subject = subRef;
  t.onsetDateTime = s.beginmoment.equivalent('FhirDateTime');
  t.abatementDateTime = s.endmoment.equivalent('FhirDateTime');
  t.recordedDate = RecordDateTime(s);

  cid.value = s.uuid();
  subRef.reference = FhirString('Patient/' + f.patient.uuid());

  if (s.codedContent().isDefined()) {
    t.code = new FHIR!CodeableConcept;
    t.code.coding = s.codedContent().collect(c |
      CodingWithDisplay(c.codingSystem(), c.value, c.dN)
    );
  }
}

rule Vaccine
  transform s: KMEHR!ItemType
  to t: FHIR!Immunization, iid: FHIR!Id, vacCodes: FHIR!CodeableConcept, admProd: FHIR!CodeableReference,
     admProdCodes: FHIR!CodeableConcept, status: FHIR!ImmunizationStatusCodes, patRef: FHIR!Reference
{
  guard: s.isVaccine()

  var tx = s.eContainer;
  var f = tx.eContainer;

  t.id = iid;
  t.vaccineCode = vacCodes;
  t.administeredProduct = admProd;
  t.status = status;
  t.patient = patRef;
  t.occurrenceDateTime = s.beginmoment.equivalent('FhirDateTime');

  iid.value = s.uuid();
  vacCodes.coding = s.vaccineIndication().collect(cd | CodingWithDisplay(
    'https://www.ehealth.fgov.be/standards/kmehr/en/tables/vaccine-indication-codes',
	cd.value, null
  ));
  admProd.concept = admProdCodes;
  admProdCodes.coding.addAll(s.content
    .select(c | c.medicinalproduct.isDefined())
    .collect(c | c.medicinalproduct.equivalents('CNKCode'))
    .flatten().select(e | e.isKindOf(FHIR!Coding)));

  status.value = FHIR!ImmunizationStatusCodesEnum#completed;
  patRef.reference = FhirString('Patient/' + f.patient.uuid());
}

// CONTEXT OPERATIONS

operation Any countryString() : String {
  return null;
}

operation Any msgSender() {
  // Same as in ATL transformation - no clear explanation why
  return null;
}

@cached
operation Any uuid(): String {
  var uuidClass = Native('java.util.UUID');
  return uuidClass.randomUUID().asString();
}

operation KMEHR!AddressType addressLine() : String {
  return Sequence {self.street, self.housenumber, self.postboxnumber}
	.reject(s | s.isUndefined() or s = '')
	.concat(' ');
}

operation KMEHR!AddressType countryString() : String {
  return self.country.countryString();
}

operation KMEHR!CountryType countryString() : String {
  return self.cd.countryString();
}

operation KMEHR!CDADMINISTRATIONUNIT toUnitsOfMeasureValue() : String {
  if (self.value.isDefined()) {
    return unitsOfMeasureMap.get(self.value);
  }
  return null;
}

operation KMEHR!CDCOUNTRY countryString() : String {
  return self.value.countryString();
}

operation String countryString() : String {
  return self.toUpperCase();
}

@cached
operation KMEHR!CDHCPARTY isOrganization() : Boolean {
  return self.value.isDefined() and self.value.startsWith('org');
}

@cached
operation KMEHR!CDHCPARTY isPractitioner() : Boolean {
  return self.value.isDefined() and self.value.startsWith('pers');
}

operation KMEHR!CDITEM isCDItemWithValue(expectedValue: String): Boolean {
  return self.s = #CDITEM and self.value = expectedValue;
}

@cached
operation KMEHR!HcpartyType isOrganization() : Boolean {
  return self.cd.exists(cd | cd.isOrganization());
}

@cached
operation KMEHR!HcpartyType isPractitioner() : Boolean {
  return self.cd.exists(cd | cd.isPractitioner());
}

@cached
operation KMEHR!ItemType contactPersonRelationships() {
  return self.cd.select(cd | cd.s = KMEHR!CDITEMschemes#CDCONTACTPERSON);
}

@cached
operation KMEHR!CDCONTENT codingSystem() : String {
   if (self.s = KMEHR!CDCONTENTschemes#ICPC and self.sV = '2') {
     return 'http://hl7.org/fhir/sid/icpc-2';
   } else if (self.s = KMEHR!CDCONTENTschemes#ICD and self.sV = '10') {
	 return 'http://hl7.org/fhir/sid/icd-10';
   } else {
     return null;
   }
}

operation KMEHR!ItemType codedContent() {
  return self.content.collect(c | c.cd.select(cd | cd.codingSystem().isDefined())).flatten();
}

operation KMEHR!ItemType vaccineIndication() {
  return self.content.collect(c | c.cd.select(cd | cd.s = #CDVACCINEINDICATION)).flatten();
}

@cached
operation KMEHR!ItemType isContactPerson() : Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('contactperson'));
}

@cached
operation KMEHR!ItemType isMedication(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('medication'));
}

@cached
operation KMEHR!ItemType isAllergy(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('allergy'));
}

@cached
operation KMEHR!ItemType isIntolerance(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('adr'));
}

@cached
operation KMEHR!ItemType isActiveProblem(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('problem') and self.lifecycle.cd.value = KMEHR!CDLIFECYCLEvalues#active);
}

@cached
operation KMEHR!ItemType isInactiveProblem(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('problem') and self.lifecycle.cd.value = KMEHR!CDLIFECYCLEvalues#inactive);
}

@cached
operation KMEHR!ItemType isVaccine(): Boolean {
  return self.cd.exists(cd | cd.isCDItemWithValue('vaccine'));
}

@cached
operation KMEHR!ItemType refPrefix(): String {
  if (self.isMedication()) {
    return 'Medication/';
  } else if (self.isAllergy() or self.isIntolerance()) {
    return 'AllergyIntolerance/';
  } else if (self.isActiveProblem() or self.isInactiveProblem()) {
    return 'Condition/';
  } else if (self.isVaccine()) {
    return 'Immunization/';
  } else {
    return 'Unknown/';
  }
}

@cached
operation KMEHR!MedicinalProductType intendedCNKCode() : String {
	return self.intendedcd
		.select(cd | cd.s = KMEHR!CDDRUGCNKschemes#CDDRUGCNK)
		.collect(cd | cd.value)
		.first;
}


@cached
operation KMEHR!TransactionType txAuthor() : KMEHR!HcpartyType {
  return self.author.txAuthor();
}

@cached
operation KMEHR!AuthorType txAuthor() : KMEHR!HcpartyType {
  return self.hcparty.first;
}

operation KMEHR!ItemType hcpartyContent() : KMEHR!HcpartyType {
	return self.content
		.select(c | c.hcparty.isDefined())
		.collect(c | c.hcparty)
		.first;
}

@cached
operation KMEHR!TelecomType system() {
  var systemStr = self.cd.select(cd | cd.s = #CDTELECOM)
    .collect(cd | cd.value).selectFirst(v | v.isDefined());

  return systemMap.get(systemStr) ?: #other;
}

@cached
operation KMEHR!TelecomType contactPointUse() {
  if (self.cd.exists(cd | cd.s = #CDTELECOM and cd.value = 'phone')) {
    if (self.eContainer.isKindOf(KMEHR!PersonType)) {
      return FHIR!ContactPointUseEnum#home;
    } else {
      return FHIR!ContactPointUseEnum#work;
    }
  } else if (self.cd.exists(cd | cd.s = #CDTELECOM and cd.value = 'mobile')) {
    return FHIR!ContactPointUseEnum#mobile;
  }

  return null;
}

@cached
operation KMEHR!TransactionType custodianItem(): KMEHR!ItemType {
  return self.item.selectFirst(i | i.cd.exists(cd | cd.value = 'gmdmanager'));
}

// Codings

@lazy
rule CNKCode
  transform s: KMEHR!MedicinalProductType
  to t: FHIR!Coding, cnk: FHIR!Uri, code: FHIR!Code
{
  t.system = cnk;
  t.code = code;
  t.display = FhirString(s.intendedname.normalize());

  cnk.value = 'https://www.ehealth.fgov.be/standards/fhir/medication/NamingSystem/cnk-codes';
  code.value = s.intendedCNKCode();
}

// Contact relationships

@lazy
rule PatientContactRelationship
  transform s: KMEHR!CDITEM
  to t: FHIR!CodeableConcept, coding: FHIR!Coding, roleCode: FHIR!Uri, code: FHIR!Code
{
  t.coding = Sequence { coding };
  coding.system = roleCode;
  coding.code = code;
  roleCode.value = 'http://terminology.hl7.org/CodeSystem/v3-RoleCode';
  code.value = relationshipMap.get(s.value);
}

// Gender mapping

@lazy
rule AdministrativeGender
  transform s: KMEHR!SexType
  to t: FHIR!AdministrativeGender
{
  guard: s.cd.isDefined() and s.cd.value.isDefined()
  t.value = genderMap.get(s.cd.value);
}

// BundleEntry rule hierarchy

@abstract
rule BundleEntry
  transform s: Any
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
{
  be.fullUrl = fullUrl;
  be.resource = rc;
  fullUrl.value = 'urn:uuid:' + s.uuid();
}

@lazy
rule CompositionBundleEntry
  transform s: KMEHR!TransactionType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.cd.exists(cd|cd.value = 'sumehr')
  rc.composition ::= s;
}

@lazy
rule PatientBundleEntry
  transform s: KMEHR!PersonType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  rc.patient = s.equivalents('Patient').selectFirst(e|e.isKindOf(FHIR!Patient));
}

@lazy
rule OrganizationBundleEntry
  transform s: KMEHR!HcpartyType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.isOrganization()
  rc.organization = s.equivalents().selectFirst(e|e.isKindOf(FHIR!Organization));
}

@lazy
rule PractitionerBundleEntry
  transform s: KMEHR!HcpartyType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.isPractitioner()

  rc.practitioner = s.equivalents().selectFirst(e|e.isKindOf(FHIR!Practitioner));
}

@lazy
rule MedicationBundleEntry
  transform s: KMEHR!ItemType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.isMedication()
  rc.medication = s.equivalents().selectFirst(e|e.isKindOf(FHIR!Medication));
}

@lazy
rule PosologyBundleEntry
  transform s: KMEHR!PosologyType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  rc.medicationStatement = s.equivalents().selectFirst(e|e.isKindOf(FHIR!MedicationStatement));
}

@lazy
rule AllergyIntoleranceBundleEntry
  transform s: KMEHR!ItemType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.isAllergy() or s.isIntolerance()
  rc.allergyIntolerance = s.equivalents().selectFirst(e|e.isKindOf(FHIR!AllergyIntolerance));
}

@lazy
rule ConditionBundleEntry
  transform s: KMEHR!ItemType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.isActiveProblem() or s.isInactiveProblem()
  rc.condition = s.equivalents().selectFirst(e|e.isKindOf(FHIR!Condition));
}

@lazy
rule ImmunizationBundleEntry
  transform s: KMEHR!ItemType
  to be: FHIR!BundleEntry, fullUrl: FHIR!Uri, rc: FHIR!ResourceContainer
  extends BundleEntry
{
  guard: s.isVaccine()
  rc.immunization = s.equivalents().selectFirst(e | e.isKindOf(FHIR!Immunization));
}

// CompositionSection rule hierarchy

@abstract
rule CompositionSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
{
  t.code = cc;
  cc.coding = Sequence { coding };
  coding.system = loinc;
  coding.code = code;
  loinc.value = 'http://loinc.org';
}

@lazy
rule MedicationSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Medication');

  var medItems = s.item.select(i | i.isMedication());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('History of Medication use Narrative');
  code.value = '10160-0';   
}

@lazy
rule AllergyIntoleranceSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Allergies and Intolerances');

  var medItems = s.item.select(i | i.isAllergy() or i.isIntolerance());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('Allergies and adverse reactions Document');
  code.value = '48765-2';
}

@lazy
rule ActiveProblemSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Active Problems');

  var medItems = s.item.select(i | i.isActiveProblem());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('Problem list Reported');
  code.value = '11450-4';
}

@lazy
rule ImmunizationSection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('Immunizations');

  var medItems = s.item.select(i | i.isVaccine());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('History of Immunization Narrative');
  code.value = '11369-6';
}

@lazy
rule HistorySection
  transform s: KMEHR!TransactionType
  to t: FHIR!CompositionSection, cc: FHIR!CodeableConcept, coding: FHIR!Coding, loinc: FHIR!Uri, code: FHIR!Code
  extends CompositionSection
{
  t.title = FhirString('History of Past Illness');

  var medItems = s.item.select(i | i.isInactiveProblem());
  t.entry = medItems.collect(i | CompositionSectionEntry(i));

  coding.display = FhirString('Hx of Past illness');
  code.value = '11348-0';
}

// Utility operations

operation String normalize() : String {
  return self.trim().replaceAll('(\t|\n| )+', ' ');
}

operation KMEHR!CDDAYPERIOD toEventTiming() {
  if (self.value.isDefined()) {
    return dayPeriodMap.get(self.value);
  }
  return null;
}

// "LAZY RULE" OPERATIONS

operation CodeableConcept(coding: FHIR!Coding) {
  var type = new FHIR!CodeableConcept;
  type.coding = Sequence { coding };
  return type;
}

operation CodingWithDisplay(system: String, code: String, display: String) {
  var coding = new FHIR!Coding;

  coding.system = new FHIR!Uri;
  coding.system.value = system.trim();
  coding.code = new FHIR!Code;
  coding.code.value = code.trim();
  if (display.isDefined()) {
    coding.display = FhirString(display.trim());
  }

  return coding;
}

operation CompositionIdentifier(uuid: String) {
  var ips = new FHIR!Identifier;
  ips.system = new FHIR!Uri;
  ips.value = FhirString(uuid);
  ips.system.value = 'urn:oid:2.16.724.4.8.10.200.10';
  return ips;
}

operation CompositionSectionEntry(s: KMEHR!ItemType) {
  var t = new FHIR!Reference;
  t.reference = FhirString(s.refPrefix() + s.uuid());
  return t;
}

@lazy
rule EventTiming
  transform s: KMEHR!DayperiodType
  to t: FHIR!EventTiming
{
  t.value = s.cd.toEventTiming();
}

operation FhirBoolean(s: Boolean): FHIR!fhir::`Boolean` {
  var fhirB = new FHIR!fhir::`Boolean`;
  fhirB.value = s;
  return fhirB;
}

rule FhirDate
  transform s: KMEHR!DateType
  to t: FHIR!fhir::Date
{
  guard: s.date.isDefined()
  t.value = s.date;
}

rule FhirDateTime
  transform s: KMEHR!MomentType
  to t: FHIR!DateTime
{
  guard: s.date.isDefined()
  t.value = s.date;
}

operation FhirDecimal(n) {
  var v = new FHIR!Decimal;
  v.value = n;
  return v;
}

operation FhirPositiveInt(s: Integer): FHIR!PositiveInt {
  var t = new FHIR!PositiveInt;
  t.value = Native('java.math.BigInteger').valueOf(s.longValue());
  return t;
}

operation FhirString(uuid: String) {
  var fhirS = new FHIR!`fhir::String`;
  fhirS.value = uuid;
  return fhirS;
}

operation RecordDateTime(s: KMEHR!ItemType) {
  if (s.recorddatetime.isDefined()) {
    var t = new FHIR!DateTime;
    t.value = s.recorddatetime;
    return t;
  }
  return null;
}